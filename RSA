// Java Program to Implement the RSA Algorithm
import java.math.*;
import java.util.*;

class RSA {
	public static void main(String args[])
	{
		int p, q, n, z, d = 0, e, i;
		// The number to be encrypted and decrypted
		int m = 12;
		double c;
		BigInteger decmsg;

		p = 3; // 1st prime number
		q = 11; // 2nd prime number
		n = p * q;
		z = (p - 1) * (q - 1); // eulers totient function phi(n)
		System.out.println("the value of z = " + z);
		// e is for public key exponent
		for (e = 2; e < z; e++) {

			if (gcd(e, z) == 1) {
				break;
			}
		}
		System.out.println("the value of e = " + e);
		for (i = 0; i <= 9; i++) {
			int x = 1 + (i * z);

			// d is for private key exponent
			if (x % e == 0) {
				d = x / e;
				break;
			}
		}
		System.out.println("the value of d = " + d);
		
		System.out.println("the public key is:" + "{"+e+","+n+"}");
		System.out.println("the private key is:" + "{"+d+","+n+"}");
		
		c = (Math.pow(m, e)) % n; // for encryption
		System.out.println("Encrypted message is : " + c);
		// converting int value of n to BigInteger
		BigInteger N = BigInteger.valueOf(n);

		// converting float value of c to BigInteger
		BigInteger C = BigDecimal.valueOf(c).toBigInteger();
		decmsg = (C.pow(d)).mod(N); //for decryption
		System.out.println("Decrypted message is : "
						+ decmsg);
	}

	static int gcd(int e, int z)
	{
		if (e == 0)
			return z;
		else
			return gcd(z % e, e);
	}
}
